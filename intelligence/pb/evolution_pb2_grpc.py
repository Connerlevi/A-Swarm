# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import evolution_pb2 as evolution__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in evolution_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EvolutionStub(object):
    """Python↔Go bridge for evolution operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateFitness = channel.unary_unary(
                '/aswarm.intelligence.Evolution/EvaluateFitness',
                request_serializer=evolution__pb2.EvaluateFitnessRequest.SerializeToString,
                response_deserializer=evolution__pb2.EvaluateFitnessResponse.FromString,
                _registered_method=True)
        self.EvolveOnce = channel.unary_unary(
                '/aswarm.intelligence.Evolution/EvolveOnce',
                request_serializer=evolution__pb2.EvolveOnceRequest.SerializeToString,
                response_deserializer=evolution__pb2.EvolveOnceResponse.FromString,
                _registered_method=True)
        self.StoreAntibody = channel.unary_unary(
                '/aswarm.intelligence.Evolution/StoreAntibody',
                request_serializer=evolution__pb2.StoreAntibodyRequest.SerializeToString,
                response_deserializer=evolution__pb2.StoreAntibodyResponse.FromString,
                _registered_method=True)
        self.GetPopulation = channel.unary_unary(
                '/aswarm.intelligence.Evolution/GetPopulation',
                request_serializer=evolution__pb2.GetPopulationRequest.SerializeToString,
                response_deserializer=evolution__pb2.GetPopulationResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/aswarm.intelligence.Evolution/GetMetrics',
                request_serializer=evolution__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=evolution__pb2.GetMetricsResponse.FromString,
                _registered_method=True)


class EvolutionServicer(object):
    """Python↔Go bridge for evolution operations
    """

    def EvaluateFitness(self, request, context):
        """Evaluate antibody fitness against historical data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvolveOnce(self, request, context):
        """Run one evolution cycle (mutation + selection)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreAntibody(self, request, context):
        """Store antibody for tracking
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPopulation(self, request, context):
        """Get current population state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Get evolution metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EvolutionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvaluateFitness': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateFitness,
                    request_deserializer=evolution__pb2.EvaluateFitnessRequest.FromString,
                    response_serializer=evolution__pb2.EvaluateFitnessResponse.SerializeToString,
            ),
            'EvolveOnce': grpc.unary_unary_rpc_method_handler(
                    servicer.EvolveOnce,
                    request_deserializer=evolution__pb2.EvolveOnceRequest.FromString,
                    response_serializer=evolution__pb2.EvolveOnceResponse.SerializeToString,
            ),
            'StoreAntibody': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreAntibody,
                    request_deserializer=evolution__pb2.StoreAntibodyRequest.FromString,
                    response_serializer=evolution__pb2.StoreAntibodyResponse.SerializeToString,
            ),
            'GetPopulation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPopulation,
                    request_deserializer=evolution__pb2.GetPopulationRequest.FromString,
                    response_serializer=evolution__pb2.GetPopulationResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=evolution__pb2.GetMetricsRequest.FromString,
                    response_serializer=evolution__pb2.GetMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aswarm.intelligence.Evolution', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aswarm.intelligence.Evolution', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Evolution(object):
    """Python↔Go bridge for evolution operations
    """

    @staticmethod
    def EvaluateFitness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aswarm.intelligence.Evolution/EvaluateFitness',
            evolution__pb2.EvaluateFitnessRequest.SerializeToString,
            evolution__pb2.EvaluateFitnessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvolveOnce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aswarm.intelligence.Evolution/EvolveOnce',
            evolution__pb2.EvolveOnceRequest.SerializeToString,
            evolution__pb2.EvolveOnceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreAntibody(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aswarm.intelligence.Evolution/StoreAntibody',
            evolution__pb2.StoreAntibodyRequest.SerializeToString,
            evolution__pb2.StoreAntibodyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPopulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aswarm.intelligence.Evolution/GetPopulation',
            evolution__pb2.GetPopulationRequest.SerializeToString,
            evolution__pb2.GetPopulationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aswarm.intelligence.Evolution/GetMetrics',
            evolution__pb2.GetMetricsRequest.SerializeToString,
            evolution__pb2.GetMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
