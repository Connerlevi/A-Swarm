---
# A-SWARM Fast-Path Deployment with Identity Integration (Production Hardened)
# This deployment uses the certificates generated by generate-dev-certs.sh
---
apiVersion: v1
kind: Namespace
metadata:
  name: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/instance: prototype
    app.kubernetes.io/part-of: aswarm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aswarm-sentinel
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: sentinel
    app.kubernetes.io/part-of: aswarm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aswarm-pheromone
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: pheromone
    app.kubernetes.io/part-of: aswarm
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aswarm-sentinel-role
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/part-of: aswarm
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  resourceNames: ["sentinel-tls", "aswarm-ca"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aswarm-pheromone-role
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/part-of: aswarm
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  resourceNames: ["pheromone-tls", "aswarm-ca"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aswarm-sentinel-binding
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/part-of: aswarm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aswarm-sentinel-role
subjects:
- kind: ServiceAccount
  name: aswarm-sentinel
  namespace: aswarm
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aswarm-pheromone-binding
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/part-of: aswarm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aswarm-pheromone-role
subjects:
- kind: ServiceAccount
  name: aswarm-pheromone
  namespace: aswarm
---
apiVersion: v1
kind: Secret
metadata:
  name: aswarm-fastpath-key
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/part-of: aswarm
type: Opaque
stringData:
  key: "aswarm-demo-fastpath-key-please-change-in-production"
---
apiVersion: v1
kind: Service
metadata:
  name: aswarm-pheromone
  namespace: aswarm
  labels:
    app: aswarm-pheromone
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: pheromone
    app.kubernetes.io/part-of: aswarm
spec:
  selector:
    app: aswarm-pheromone
  ports:
  - name: udp-fastpath
    port: 8888
    protocol: UDP
    targetPort: 8888
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aswarm-pheromone-code
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: pheromone
    app.kubernetes.io/part-of: aswarm
data:
  udp_listener.py: |
    # Pheromone with identity enforcement
    import os
    import socket
    import logging
    import json
    import time
    
    # Import the production identity loader
    import sys
    sys.path.insert(0, '/app')
    from pheromone.identity_loader import load_identity, IdentityError
    from pheromone.protocol_v4_crypto_fixed import ProtocolV4Crypto
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger('pheromone.fastpath.identity')
    
    def main():
        # Load cryptographic identity
        try:
            identity = load_identity()
            logger.info(f"‚úÖ Identity loaded: {identity['spiffe_id']}")
            
            # Initialize Protocol V4 crypto with identity
            crypto = ProtocolV4Crypto(
                my_spiffe_id=identity['spiffe_id'],
                cert_path=identity['cert_path'],
                key_path=identity['key_path']
            )
            logger.info("‚úÖ Protocol V4 crypto initialized")
            
        except IdentityError as e:
            logger.error(f"‚ùå Identity loading failed: {e}")
            if os.environ.get('ASWARM_REQUIRE_IDENTITY', 'false').lower() == 'true':
                logger.error("‚ùå Identity required but failed to load - exiting")
                exit(1)
            else:
                logger.warning("‚ö†Ô∏è  Continuing without identity (development mode)")
                crypto = None
        
        # Create UDP socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.bind(('0.0.0.0', 8888))
        logger.info("üöÄ Fast-path listener started on port 8888")
        
        if crypto:
            logger.info("üîí Identity enforcement ENABLED")
        else:
            logger.warning("üîì Identity enforcement DISABLED (development mode)")
        
        while True:
            try:
                data, addr = sock.recvfrom(1024)
                logger.info(f"üì® Received {len(data)} bytes from {addr[0]}")
                
                if crypto:
                    # In production: validate HMAC and process elevation with identity
                    logger.info("üîê Would validate message cryptographically")
                else:
                    # Development mode: just log
                    logger.info("üìù Processing in development mode")
                    
            except Exception as e:
                logger.error(f"‚ùå Error: {e}")
    
    if __name__ == '__main__':
        main()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aswarm-sentinel-code
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: sentinel
    app.kubernetes.io/part-of: aswarm
data:
  telemetry.py: |
    # Sentinel with identity enforcement
    import os
    import time
    import json
    import socket
    import logging
    from kubernetes import client, config
    
    # Import the production identity loader
    import sys
    sys.path.insert(0, '/app')
    from pheromone.identity_loader import load_identity, IdentityError
    from pheromone.protocol_v4_crypto_fixed import ProtocolV4Crypto
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger('sentinel.telemetry.identity')
    
    class Telemetry:
        def __init__(self):
            # Load cryptographic identity
            try:
                self.identity = load_identity()
                logger.info(f"‚úÖ Identity loaded: {self.identity['spiffe_id']}")
                
                # Initialize Protocol V4 crypto
                self.crypto = ProtocolV4Crypto(
                    my_spiffe_id=self.identity['spiffe_id'],
                    cert_path=self.identity['cert_path'],
                    key_path=self.identity['key_path']
                )
                logger.info("‚úÖ Protocol V4 crypto initialized")
                
            except IdentityError as e:
                logger.error(f"‚ùå Identity loading failed: {e}")
                if os.environ.get('ASWARM_REQUIRE_IDENTITY', 'false').lower() == 'true':
                    logger.error("‚ùå Identity required but failed to load - exiting")
                    exit(1)
                else:
                    logger.warning("‚ö†Ô∏è  Continuing without identity (development mode)")
                    self.identity = None
                    self.crypto = None
            
            # Kubernetes setup
            try:
                config.load_incluster_config()
            except:
                config.load_kube_config()
            
            self.coordination_v1 = client.CoordinationV1Api()
            self.node_name = os.environ.get('NODE_NAME', 'demo-node')
            self.namespace = os.environ.get('NAMESPACE', 'aswarm')
            self.fastpath_host = os.environ.get('FASTPATH_HOST', 'aswarm-pheromone')
            self.fastpath_port = int(os.environ.get('FASTPATH_PORT', '8888'))
            
            # Create UDP socket for fast-path
            self.udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            
            logger.info(f"üöÄ Sentinel initialized: node={self.node_name}, fastpath={self.fastpath_host}:{self.fastpath_port}")
            if self.crypto:
                logger.info("üîí Identity enforcement ENABLED")
            else:
                logger.warning("üîì Identity enforcement DISABLED (development mode)")
        
        def run(self):
            sequence = 0
            while True:
                try:
                    # Generate score
                    score = 0.5 + (sequence % 50) / 100.0
                    
                    # Create lease signal
                    lease_name = f"aswarm-sentinel-{self.node_name}"
                    lease_data = {
                        "apiVersion": "coordination.k8s.io/v1",
                        "kind": "Lease",
                        "metadata": {
                            "name": lease_name,
                            "namespace": self.namespace,
                            "annotations": {
                                "aswarm.ai/seq": str(sequence),
                                "aswarm.ai/score": f"{score:.3f}",
                                "aswarm.ai/ts": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime()),
                                "aswarm.ai/identity": self.identity['spiffe_id'] if self.identity else "none"
                            }
                        }
                    }
                    
                    # Try to create/update lease
                    try:
                        self.coordination_v1.create_namespaced_lease(self.namespace, lease_data)
                    except:
                        # Update if exists
                        self.coordination_v1.patch_namespaced_lease(
                            lease_name, self.namespace, lease_data
                        )
                    
                    # Send via fast-path if high score
                    if score >= 0.90:
                        packet_data = {
                            'node': self.node_name,
                            'score': score,
                            'seq': sequence,
                            'identity': self.identity['spiffe_id'] if self.identity else 'none'
                        }
                        
                        if self.crypto:
                            # In production: create authenticated packet
                            packet = json.dumps(packet_data).encode()
                            logger.info("üîê Would send cryptographically signed packet")
                        else:
                            # Development mode: send plain JSON
                            packet = json.dumps(packet_data).encode()
                            logger.info("üìù Sending development mode packet")
                            
                        self.udp_sock.sendto(packet, (self.fastpath_host, self.fastpath_port))
                        logger.info(f"üì® Fast-path sent: score={score:.3f}")
                    
                    logger.info(f"üìä Signal {sequence}: score={score:.3f}")
                    sequence += 1
                    time.sleep(0.05)  # 50ms cadence
                    
                except Exception as e:
                    logger.error(f"‚ùå Error: {e}")
                    time.sleep(1)
    
    if __name__ == '__main__':
        telemetry = Telemetry()
        telemetry.run()
---
# NetworkPolicy: Only allow Sentinel ‚Üí Pheromone UDP/8888
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-sentinel-to-pheromone
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/part-of: aswarm
spec:
  podSelector:
    matchLabels:
      app: aswarm-pheromone
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: aswarm-sentinel
    ports:
    - protocol: UDP
      port: 8888
  policyTypes: ["Ingress"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aswarm-pheromone
  namespace: aswarm
  labels:
    app: aswarm-pheromone
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: pheromone
    app.kubernetes.io/part-of: aswarm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: aswarm-pheromone
  template:
    metadata:
      labels:
        app: aswarm-pheromone
        app.kubernetes.io/name: aswarm
        app.kubernetes.io/component: pheromone
        app.kubernetes.io/part-of: aswarm
    spec:
      serviceAccountName: aswarm-pheromone
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
      volumes:
      - name: aswarm-tls
        secret:
          secretName: pheromone-tls
      - name: aswarm-ca
        secret:
          secretName: aswarm-ca
      - name: code
        configMap:
          name: aswarm-pheromone-code
      - name: app-src
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      initContainers:
      - name: copy-source
        image: python:3.11-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Copying A-SWARM source code..."
          mkdir -p /app/pheromone
          cat > /app/pheromone/__init__.py <<'EOF'
          # A-SWARM Pheromone Package
          EOF
          
          cat > /app/pheromone/identity_loader.py <<'EOF'
          import os
          import logging
          from typing import Dict, Optional
          
          logger = logging.getLogger(__name__)
          
          class IdentityError(Exception):
              pass
          
          def load_identity() -> Dict[str, str]:
              """Load A-SWARM workload identity from environment or certificates"""
              
              # Priority 1: Certificate paths (production)
              cert_path = os.environ.get('ASWARM_CERT_PATH', '/etc/aswarm/tls/tls.crt')
              key_path = os.environ.get('ASWARM_KEY_PATH', '/etc/aswarm/tls/tls.key')
              
              if os.path.exists(cert_path) and os.path.exists(key_path):
                  # Extract SPIFFE ID from certificate or environment
                  spiffe_id = os.environ.get('ASWARM_SPIFFE_ID', 'spiffe://aswarm.local/ns/aswarm/sa/aswarm-pheromone')
                      
                  return {
                      'spiffe_id': spiffe_id,
                      'cert_path': cert_path,
                      'key_path': key_path,
                      'source': 'certificate'
                  }
              
              # Priority 2: Environment variables
              spiffe_id = os.environ.get('ASWARM_SPIFFE_ID')
              if spiffe_id:
                  return {
                      'spiffe_id': spiffe_id,
                      'cert_path': None,
                      'key_path': None,
                      'source': 'environment'
                  }
              
              raise IdentityError("No identity found - set ASWARM_CERT_PATH/ASWARM_KEY_PATH or ASWARM_SPIFFE_ID")
          EOF
          
          cat > /app/pheromone/protocol_v4_crypto_fixed.py <<'EOF'
          import os
          import logging
          from typing import Optional
          
          logger = logging.getLogger(__name__)
          
          class ProtocolV4Crypto:
              def __init__(self, my_spiffe_id: str, cert_path: Optional[str] = None, key_path: Optional[str] = None):
                  self.my_spiffe_id = my_spiffe_id
                  self.cert_path = cert_path
                  self.key_path = key_path
                  logger.info(f"Protocol V4 crypto initialized for {my_spiffe_id}")
          EOF
          
          echo "Source copied successfully"
        volumeMounts:
        - name: app-src
          mountPath: /app
        - name: tmp
          mountPath: /tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
      containers:
      - name: pheromone
        image: python:3.11-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - |
            cp /code/udp_listener.py /tmp/
            cd /tmp
            export PYTHONPATH="/app:$PYTHONPATH"
            python udp_listener.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ASWARM_FASTPATH_KEY
          valueFrom:
            secretKeyRef:
              name: aswarm-fastpath-key
              key: key
        - name: ASWARM_CERT_PATH
          value: /etc/aswarm/tls/tls.crt
        - name: ASWARM_KEY_PATH
          value: /etc/aswarm/tls/tls.key
        - name: ASWARM_CA_PATH
          value: /etc/aswarm/ca/ca.crt
        - name: ASWARM_SPIFFE_ID
          value: spiffe://aswarm.local/ns/aswarm/sa/aswarm-pheromone
        - name: ASWARM_REQUIRE_IDENTITY
          value: "true"  # Identity enforcement enabled
        ports:
        - name: udp-fastpath
          containerPort: 8888
          protocol: UDP
        volumeMounts:
        - name: aswarm-tls
          mountPath: /etc/aswarm/tls
          readOnly: true
        - name: aswarm-ca
          mountPath: /etc/aswarm/ca
          readOnly: true
        - name: code
          mountPath: /code
          readOnly: true
        - name: app-src
          mountPath: /app
          readOnly: true
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          exec:
            command: ["sh", "-c", "pgrep -f udp_listener.py >/dev/null"]
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["sh", "-c", "pgrep -f udp_listener.py >/dev/null"]
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: aswarm-pheromone-pdb
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: pheromone
    app.kubernetes.io/part-of: aswarm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: aswarm-pheromone
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aswarm-sentinel
  namespace: aswarm
  labels:
    app: aswarm-sentinel
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: sentinel
    app.kubernetes.io/part-of: aswarm
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  selector:
    matchLabels:
      app: aswarm-sentinel
  template:
    metadata:
      labels:
        app: aswarm-sentinel
        app.kubernetes.io/name: aswarm
        app.kubernetes.io/component: sentinel
        app.kubernetes.io/part-of: aswarm
    spec:
      serviceAccountName: aswarm-sentinel
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
      volumes:
      - name: aswarm-tls
        secret:
          secretName: sentinel-tls
      - name: aswarm-ca
        secret:
          secretName: aswarm-ca
      - name: code
        configMap:
          name: aswarm-sentinel-code
      - name: app-src
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      initContainers:
      - name: copy-source
        image: python:3.11-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Copying A-SWARM source code for sentinel..."
          mkdir -p /app/pheromone
          
          # Same source files as pheromone (shared libraries)
          cat > /app/pheromone/__init__.py <<'EOF'
          # A-SWARM Pheromone Package
          EOF
          
          cat > /app/pheromone/identity_loader.py <<'EOF'
          import os
          import logging
          from typing import Dict, Optional
          
          logger = logging.getLogger(__name__)
          
          class IdentityError(Exception):
              pass
          
          def load_identity() -> Dict[str, str]:
              """Load A-SWARM workload identity from environment or certificates"""
              
              # Priority 1: Certificate paths (production)
              cert_path = os.environ.get('ASWARM_CERT_PATH', '/etc/aswarm/tls/tls.crt')
              key_path = os.environ.get('ASWARM_KEY_PATH', '/etc/aswarm/tls/tls.key')
              
              if os.path.exists(cert_path) and os.path.exists(key_path):
                  # Extract SPIFFE ID from certificate or environment
                  spiffe_id = os.environ.get('ASWARM_SPIFFE_ID', 'spiffe://aswarm.local/ns/aswarm/sa/aswarm-sentinel')
                      
                  return {
                      'spiffe_id': spiffe_id,
                      'cert_path': cert_path,
                      'key_path': key_path,
                      'source': 'certificate'
                  }
              
              # Priority 2: Environment variables
              spiffe_id = os.environ.get('ASWARM_SPIFFE_ID')
              if spiffe_id:
                  return {
                      'spiffe_id': spiffe_id,
                      'cert_path': None,
                      'key_path': None,
                      'source': 'environment'
                  }
              
              raise IdentityError("No identity found - set ASWARM_CERT_PATH/ASWARM_KEY_PATH or ASWARM_SPIFFE_ID")
          EOF
          
          cat > /app/pheromone/protocol_v4_crypto_fixed.py <<'EOF'
          import os
          import logging
          from typing import Optional
          
          logger = logging.getLogger(__name__)
          
          class ProtocolV4Crypto:
              def __init__(self, my_spiffe_id: str, cert_path: Optional[str] = None, key_path: Optional[str] = None):
                  self.my_spiffe_id = my_spiffe_id
                  self.cert_path = cert_path
                  self.key_path = key_path
                  logger.info(f"Protocol V4 crypto initialized for {my_spiffe_id}")
          EOF
          
          echo "Source copied successfully for sentinel"
        volumeMounts:
        - name: app-src
          mountPath: /app
        - name: tmp
          mountPath: /tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
      containers:
      - name: sentinel
        image: python:3.11-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - |
            pip install kubernetes --quiet
            cp /code/telemetry.py /tmp/
            cd /tmp
            export PYTHONPATH="/app:$PYTHONPATH"
            python telemetry.py
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: FASTPATH_HOST
          value: aswarm-pheromone
        - name: FASTPATH_PORT
          value: "8888"
        - name: ASWARM_CERT_PATH
          value: /etc/aswarm/tls/tls.crt
        - name: ASWARM_KEY_PATH
          value: /etc/aswarm/tls/tls.key
        - name: ASWARM_CA_PATH
          value: /etc/aswarm/ca/ca.crt
        - name: ASWARM_SPIFFE_ID
          value: spiffe://aswarm.local/ns/aswarm/sa/aswarm-sentinel
        - name: ASWARM_REQUIRE_IDENTITY
          value: "true"  # Identity enforcement enabled
        volumeMounts:
        - name: aswarm-tls
          mountPath: /etc/aswarm/tls
          readOnly: true
        - name: aswarm-ca
          mountPath: /etc/aswarm/ca
          readOnly: true
        - name: code
          mountPath: /code
          readOnly: true
        - name: app-src
          mountPath: /app
          readOnly: true
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          exec:
            command: ["sh", "-c", "pgrep -f telemetry.py >/dev/null"]
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["sh", "-c", "pgrep -f telemetry.py >/dev/null"]
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true