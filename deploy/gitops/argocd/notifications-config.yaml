apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications
    app.kubernetes.io/part-of: argocd
data:
  # Slack configuration
  service.slack: |
    token: $slack-token
    username: argocd
    icon: :rocket:

  # Template for sync status
  template.app-sync-status: |
    message: |
      {{if eq .app.status.operationState.phase "Succeeded"}}
        :white_check_mark: **{{.app.metadata.name}}** deployed successfully to {{.app.spec.destination.namespace}}

        **Details:**
        - Revision: `{{.app.status.sync.revision | substr 0 7}}`
        - Environment: {{index .app.metadata.labels "environment"}}
        - Sync Time: {{.app.status.operationState.finishedAt}}

        **Links:**
        {{range .app.spec.info}}
        - [{{.name}}]({{.value}})
        {{end}}
      {{else if eq .app.status.operationState.phase "Failed"}}
        :x: **{{.app.metadata.name}}** deployment FAILED in {{.app.spec.destination.namespace}}

        **Error:** {{.app.status.operationState.message}}
        - Revision: `{{.app.status.sync.revision | substr 0 7}}`
        - Environment: {{index .app.metadata.labels "environment"}}

        **Action Required:** Check ArgoCD UI for details
      {{else}}
        :warning: **{{.app.metadata.name}}** sync status: {{.app.status.operationState.phase}}
        - Environment: {{index .app.metadata.labels "environment"}}
        - Message: {{.app.status.operationState.message}}
      {{end}}
    slack:
      attachments: |
        [{
          "title": "ArgoCD Application: {{.app.metadata.name}}",
          "title_link": "https://argocd.internal/applications/{{.app.metadata.name}}",
          "color": "{{if eq .app.status.operationState.phase "Succeeded"}}good{{else if eq .app.status.operationState.phase "Failed"}}danger{{else}}warning{{end}}",
          "fields": [
            {
              "title": "Environment",
              "value": "{{index .app.metadata.labels "environment"}}",
              "short": true
            },
            {
              "title": "Namespace",
              "value": "{{.app.spec.destination.namespace}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "`{{.app.status.sync.revision | substr 0 7}}`",
              "short": true
            },
            {
              "title": "Health",
              "value": "{{.app.status.health.status}}",
              "short": true
            }
          ]
        }]

  # Template for health degraded
  template.app-health-degraded: |
    message: |
      :warning: **{{.app.metadata.name}}** health degraded in {{.app.spec.destination.namespace}}

      **Health Status:** {{.app.status.health.status}}
      **Message:** {{.app.status.health.message}}

      **Affected Resources:**
      {{range .app.status.resources}}
      {{if ne .health.status "Healthy"}}
      - {{.kind}}/{{.name}}: {{.health.status}}
      {{end}}
      {{end}}

      **Action Required:** Check application logs and Grafana dashboards
    slack:
      attachments: |
        [{
          "title": "ArgoCD Health Alert: {{.app.metadata.name}}",
          "title_link": "https://argocd.internal/applications/{{.app.metadata.name}}",
          "color": "warning",
          "fields": [
            {
              "title": "Environment",
              "value": "{{index .app.metadata.labels "environment"}}",
              "short": true
            },
            {
              "title": "Health Status",
              "value": "{{.app.status.health.status}}",
              "short": true
            },
            {
              "title": "Namespace",
              "value": "{{.app.spec.destination.namespace}}",
              "short": true
            }
          ]
        }]

  # Triggers - when to send notifications
  trigger.on-sync-succeeded: |
    - when: app.status.operationState.phase in ['Succeeded']
      send: [app-sync-status]
  trigger.on-sync-failed: |
    - when: app.status.operationState.phase in ['Error', 'Failed']
      send: [app-sync-status]
  trigger.on-health-degraded: |
    - when: app.status.health.status == 'Degraded' or app.status.health.status == 'Progressing'
      send: [app-health-degraded]

  # Subscriptions - which apps send to which channels
  subscriptions: |
    # Production alerts to main channel
    - recipients:
      - slack:aswarm-alerts
      triggers:
      - on-sync-failed
      - on-health-degraded
      - on-sync-succeeded  # Also notify on successful prod deployments
      selector: environment=production

    # Development to dev channel (less noise)
    - recipients:
      - slack:aswarm-dev
      triggers:
      - on-sync-failed
      selector: environment=development
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-notifications-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications
    app.kubernetes.io/part-of: argocd
type: Opaque
stringData:
  # Slack bot token - replace with actual token
  slack-token: "xoxb-your-slack-bot-token-here"
---
# Service to enable notifications
apiVersion: v1
kind: Service
metadata:
  name: argocd-notifications-controller-metrics
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/part-of: argocd
spec:
  ports:
  - name: metrics
    port: 9001
    protocol: TCP
    targetPort: 9001
  selector:
    app.kubernetes.io/name: argocd-notifications-controller