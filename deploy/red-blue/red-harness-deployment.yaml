apiVersion: apps/v1
kind: Deployment
metadata:
  name: aswarm-red-harness
  namespace: aswarm-redteam
  labels:
    app: aswarm-red-harness
    aswarm.io/component: redteam-harness
    aswarm.io/security-level: zero-compromise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aswarm-red-harness
  template:
    metadata:
      labels:
        app: aswarm-red-harness
        aswarm.io/component: redteam-harness
        aswarm.io/security-level: zero-compromise
      annotations:
        aswarm.io/description: "Red Team harness for orchestrating attack episodes"
    spec:
      serviceAccountName: aswarm-redswarm
      automountServiceAccountToken: false  # Explicit mount below
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      # Wait for TLS certificate to be issued
      - name: wait-for-tls
        image: busybox:1.36
        command: ['sh', '-c', 'for i in $(seq 1 60); do [ -f /certs/tls.crt ] && exit 0; echo "waiting for cert..."; sleep 5; done; echo "timed out"; exit 1']
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: certs
          mountPath: /certs
          readOnly: true
      containers:
      - name: harness
        image: ghcr.io/aswarm-security/red-harness:2.0.0
        imagePullPolicy: Always
        args:  # Use args instead of command to leverage ENTRYPOINT
        - --blue-service
        - aswarm-blue-stub
        - --blue-namespace
        - aswarm-blueteam
        - --identity-mode
        - cert-manager
        env:
        # Metrics port (Python default prometheus_client uses 8080)
        - name: ASWARM_METRICS_PORT
          value: "8080"
        - name: ASWARM_TRUST_DOMAIN
          value: "aswarm.local"
        - name: ASWARM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ASWARM_CERT_PATH
          value: "/certs/tls.crt"
        - name: ASWARM_KEY_PATH
          value: "/certs/tls.key"
        # For kubectl operations
        - name: KUBECONFIG
          value: ""  # Use in-cluster config
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          capabilities:
            drop:
            - ALL
        # Probes adjusted for Python prometheus_client defaults
        startupProbe:
          httpGet:
            path: /
            port: metrics
          periodSeconds: 5
          failureThreshold: 60  # 5 minutes startup window
        livenessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: certs
          mountPath: /certs
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: home
          mountPath: /home/nonroot
        - name: k8s-api-token
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: true
      volumes:
      - name: certs
        secret:
          secretName: aswarm-red-harness-tls
          defaultMode: 0400
      - name: tmp
        emptyDir: {}
      - name: home
        emptyDir: {}
      - name: k8s-api-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              audience: https://kubernetes.default.svc
              expirationSeconds: 3600
---
# Certificate for Red Harness (using correct issuer)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: aswarm-red-harness
  namespace: aswarm-redteam
  labels:
    aswarm.io/component: redteam-harness
spec:
  secretName: aswarm-red-harness-tls
  duration: 24h
  renewBefore: 8h
  privateKey:
    algorithm: ECDSA
    size: 256
  dnsNames:
  - aswarm-red-harness
  - aswarm-red-harness.aswarm-redteam
  - aswarm-red-harness.aswarm-redteam.svc
  - aswarm-red-harness.aswarm-redteam.svc.cluster.local
  uris:
  - spiffe://aswarm.local/ns/aswarm-redteam/sa/aswarm-redswarm
  issuerRef:
    name: aswarm-ca-issuer  # FIXED: Using correct issuer name
    kind: ClusterIssuer
    group: cert-manager.io
---
# Service for metrics exposure
apiVersion: v1
kind: Service
metadata:
  name: aswarm-red-harness
  namespace: aswarm-redteam
  labels:
    app: aswarm-red-harness
    aswarm.io/component: redteam-harness
spec:
  selector:
    app: aswarm-red-harness
  ports:
  - name: metrics
    port: 8080  # FIXED: Using Python default port
    targetPort: metrics
    protocol: TCP
---
# ServiceMonitor for Prometheus scraping (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: aswarm-red-harness
  namespace: aswarm-redteam
  labels:
    app: aswarm-red-harness
    aswarm.io/component: redteam-harness
spec:
  selector:
    matchLabels:
      app: aswarm-red-harness
  endpoints:
  - port: metrics
    interval: 30s
    path: /  # FIXED: Python prometheus_client serves at root
---
# NetworkPolicy for Red Harness (egress control)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: aswarm-red-harness-egress
  namespace: aswarm-redteam
  labels:
    app: aswarm-red-harness
    aswarm.io/component: redteam-harness
spec:
  podSelector:
    matchLabels:
      app: aswarm-red-harness
  policyTypes:
  - Egress
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
    ports:
    - protocol: UDP
      port: 53
  # Allow Kubernetes API
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 443
  # Alternative: Allow to API server by IP (if above doesn't work)
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.169.254/32  # Block IMDS
    ports:
    - protocol: TCP
      port: 443
  # Allow Blue service communication
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: aswarm-blueteam
    ports:
    - protocol: TCP
      port: 8080
  # Allow cert-manager webhook (for certificate issuance)
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: cert-manager
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 10250