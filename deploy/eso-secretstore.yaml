# External Secrets Operator SecretStore for A-SWARM
# Uses in-cluster Kubernetes provider with same-namespace backing secrets
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: aswarm-secretstore
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: external-secrets
spec:
  provider:
    kubernetes:
      # Explicit where the backing K8s secrets live
      remoteNamespace: aswarm
      # CA configuration for in-cluster access
      server:
        caProvider:
          type: "ConfigMap"
          name: "kube-root-ca.crt"
          key: "ca.crt"
      auth:
        serviceAccount:
          name: aswarm-eso-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aswarm-eso-sa
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: external-secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aswarm-eso-secrets-reader
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: external-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  # Can add resourceNames for tighter security if needed:
  # resourceNames: ["aswarm-fastpath-key", "pheromone-tls", "sentinel-tls", "aswarm-ca"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aswarm-eso-secrets-binding
  namespace: aswarm
  labels:
    app.kubernetes.io/name: aswarm
    app.kubernetes.io/component: external-secrets
subjects:
- kind: ServiceAccount
  name: aswarm-eso-sa
  namespace: aswarm
roleRef:
  kind: Role
  name: aswarm-eso-secrets-reader
  apiGroup: rbac.authorization.k8s.io